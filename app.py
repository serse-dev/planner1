import streamlit as st
import pandas as pd
import os
import re

csv_path = "lesson_planner/csv_exports/Plan.csv"
shalg_path = "lesson_planner/csv_exports/–®–∞–ª–≥—É—É—Ä.csv"
criteria_path = "lesson_planner/csv_exports/“Æ—Ä –¥“Ø–Ω–≥–∏–π–Ω —à–∞–ª–≥—É—É—Ä.csv"
level_path = "lesson_planner/csv_exports/–ì“Ø–π—Ü—ç—Ç–≥—ç–ª–∏–π–Ω —Ç“Ø–≤—à–∏–Ω.csv"

st.set_page_config(page_title="–≠—ç–ª–∂–∏—Ç —Ö–∏—á—ç—ç–ª–∏–π–Ω —Ç”©–ª”©–≤–ª”©–ª—Ç", page_icon="üìö", layout="wide")

st.title("üìö –≠—ç–ª–∂–∏—Ç —Ö–∏—á—ç—ç–ª–∏–π–Ω —Ç”©–ª”©–≤–ª”©–ª—Ç")
st.markdown("""
<style>
.card {
    background-color: #f9f9fc;
    border-radius: 10px;
    padding: 1.5em;
    margin-bottom: 1em;
    box-shadow: 0 2px 8px rgba(0,0,0,0.04);
}
.header {
    font-size: 1.2em;
    font-weight: bold;
    color: #3a3a7c;
}
.goal {
    background-color: #eaf6ff;
    border-radius: 8px;
    padding: 1em;
    margin-top: 0.5em;
    font-size: 1.1em;
}
.shalg {
    background-color: #e6fff2;
    border-radius: 8px;
    padding: 1em;
    margin-top: 0.5em;
    font-size: 1.05em;
}
.outcome {
    background-color: #fff0e6;
    border-radius: 8px;
    padding: 1em;
    margin-top: 0.5em;
    font-size: 1.05em;
}
.copy-box {
    background-color: #f0f0ff;
    border-radius: 8px;
    padding: 1em;
    margin-top: 1em;
    font-size: 1em;
    border: 1px dashed #3a3a7c;
}
</style>
""", unsafe_allow_html=True)

def split_sentences(text):
    # . —Ç—ç–º–¥—ç–≥–ª—ç–≥—ç—ç–≥—ç—ç—Ä ”©–≥“Ø“Ø–ª–±—ç—Ä –±“Ø—Ä–∏–π–≥ –º”©—Ä –±–æ–ª–≥–æ–Ω —Ö—É–≤–∞–∞—Ö
    if not isinstance(text, str):
        return []
    sentences = [s.strip() for s in re.split(r"\.(?!\d)", text) if s.strip()]
    sentences = [s + "." if not s.endswith(".") else s for s in sentences]
    # 1.1. 1.2 –≥—ç—Ö –º—ç—Ç –∑”©–≤—Ö”©–Ω –¥—É–≥–∞–∞—Ä–ª–∞—Å–∞–Ω —Ö–æ–æ—Å–æ–Ω –º”©—Ä–∏–π–≥ —Ö–∞—Å–Ω–∞
    filtered = [s for s in sentences if not re.match(r"^\d+\.\d+\.*$", s)]
    return filtered

if not os.path.exists(csv_path):
    st.error(f"{csv_path} —Ñ–∞–π–ª –æ–ª–¥—Å–æ–Ω–≥“Ø–π.")
else:
    df = pd.read_csv(csv_path)
    df = df.rename(columns={
        "–°—É–¥–ª–∞–≥–¥–∞—Ö—É—É–Ω—ã –Ω—ç—Ä": "–•–∏—á—ç—ç–ª–∏–π–Ω –Ω—ç—Ä",
        "–ù—ç–≥–∂–∏–π–Ω –Ω—ç—Ä": "–ù—ç–≥–∂ —Ö–∏—á—ç—ç–ª",
        "–≠—ç–ª–∂–∏—Ç —Ö–∏—á—ç—ç–ª": "–≠—ç–ª–∂–∏—Ç —Ö–∏—á—ç—ç–ª",
        "–≠—ç–ª–∂–∏—Ç —Ö–∏—á—ç—ç–ª–∏–π–Ω –∑–æ—Ä–∏–ª–≥–æ": "–≠—ç–ª–∂–∏—Ç —Ö–∏—á—ç—ç–ª–∏–π–Ω –∑–æ—Ä–∏–ª–≥–æ"
    })

    subjects = df["–•–∏—á—ç—ç–ª–∏–π–Ω –Ω—ç—Ä"].unique()
    subject = st.selectbox("–•–∏—á—ç—ç–ª–∏–π–Ω –Ω—ç—Ä —Å–æ–Ω–≥–æ—Ö", subjects)
    unit_df = df[df["–•–∏—á—ç—ç–ª–∏–π–Ω –Ω—ç—Ä"] == subject]
    units = unit_df["–ù—ç–≥–∂ —Ö–∏—á—ç—ç–ª"].unique()
    unit = st.selectbox("–ù—ç–≥–∂ —Ö–∏—á—ç—ç–ª —Å–æ–Ω–≥–æ—Ö", units)
    lesson_df = unit_df[unit_df["–ù—ç–≥–∂ —Ö–∏—á—ç—ç–ª"] == unit]
    lessons = lesson_df["–≠—ç–ª–∂–∏—Ç —Ö–∏—á—ç—ç–ª"].unique()
    lesson = st.selectbox("–≠—ç–ª–∂–∏—Ç —Ö–∏—á—ç—ç–ª —Å–æ–Ω–≥–æ—Ö", lessons)
    selected = lesson_df[lesson_df["–≠—ç–ª–∂–∏—Ç —Ö–∏—á—ç—ç–ª"] == lesson]
    if selected.empty:
        st.warning("–¢–æ—Ö–∏—Ä–æ—Ö —ç—ç–ª–∂–∏—Ç —Ö–∏—á—ç—ç–ª –æ–ª–¥—Å–æ–Ω–≥“Ø–π.")
    else:
        selected = selected.iloc[0]

        # –®–∞–ª–≥—É—É—Ä.csv —Ñ–∞–π–ª–∞–∞—Å —Ç—É—Ö–∞–π–Ω —ç—ç–ª–∂–∏—Ç —Ö–∏—á—ç—ç–ª–¥ —Ç–æ—Ö–∏—Ä–æ—Ö —Å—É—Ä–∞–ª—Ü–∞—Ö—É–π–Ω –∑–æ—Ä–∏–ª—Ç, “Ø—Ä –¥“Ø–Ω
        learning_objective = "–•–æ–æ—Å–æ–Ω –±–∞–π–Ω–∞."
        learning_outcome = "–•–æ–æ—Å–æ–Ω –±–∞–π–Ω–∞."
        objectives_list = []
        outcomes_list = []
        if os.path.exists(shalg_path):
            shalg_df = pd.read_csv(shalg_path)
            shalg_match = shalg_df[shalg_df["–≠—ç–ª–∂–∏—Ç —Ö–∏—á—ç—ç–ª"] == lesson]
            if not shalg_match.empty:
                objectives_list = shalg_match["–°—É—Ä–∞–ª—Ü–∞—Ö—É–π–Ω –∑–æ—Ä–∏–ª—Ç"].dropna().unique().tolist()
                outcomes_list = shalg_match["–°—É—Ä–∞–ª—Ü–∞—Ö—É–π–Ω “Ø—Ä –¥“Ø–Ω"].dropna().unique().tolist()
                learning_objective = "<br>".join(objectives_list) if objectives_list else "–•–æ–æ—Å–æ–Ω –±–∞–π–Ω–∞."
                learning_outcome = "<br>".join(outcomes_list) if outcomes_list else "–•–æ–æ—Å–æ–Ω –±–∞–π–Ω–∞."
        else:
            learning_objective = "–®–∞–ª–≥—É—É—Ä.csv —Ñ–∞–π–ª –æ–ª–¥—Å–æ–Ω–≥“Ø–π."
            learning_outcome = "–®–∞–ª–≥—É—É—Ä.csv —Ñ–∞–π–ª –æ–ª–¥—Å–æ–Ω–≥“Ø–π."
            objectives_list = []
            outcomes_list = []

        st.markdown(f"""
        <div class="card">
            <div class="header">–•–∏—á—ç—ç–ª–∏–π–Ω –Ω—ç—Ä:</div>
            <div>{selected['–•–∏—á—ç—ç–ª–∏–π–Ω –Ω—ç—Ä']}</div>
            <div class="header">–ù—ç–≥–∂ —Ö–∏—á—ç—ç–ª:</div>
            <div>{selected['–ù—ç–≥–∂ —Ö–∏—á—ç—ç–ª']}</div>
            <div class="header">–≠—ç–ª–∂–∏—Ç —Ö–∏—á—ç—ç–ª:</div>
            <div>{selected['–≠—ç–ª–∂–∏—Ç —Ö–∏—á—ç—ç–ª']}</div>
            <div class="header">–°—É—Ä–∞–ª—Ü–∞—Ö—É–π–Ω –∑–æ—Ä–∏–ª—Ç:</div>
            <div class="shalg">{learning_objective if learning_objective else "–•–æ–æ—Å–æ–Ω –±–∞–π–Ω–∞."}</div>
            <div class="header">–≠—ç–ª–∂–∏—Ç —Ö–∏—á—ç—ç–ª–∏–π–Ω –∑–æ—Ä–∏–ª–≥–æ:</div>
            <div class="goal">{selected['–≠—ç–ª–∂–∏—Ç —Ö–∏—á—ç—ç–ª–∏–π–Ω –∑–æ—Ä–∏–ª–≥–æ'] if selected['–≠—ç–ª–∂–∏—Ç —Ö–∏—á—ç—ç–ª–∏–π–Ω –∑–æ—Ä–∏–ª–≥–æ'] else "–•–æ–æ—Å–æ–Ω –±–∞–π–Ω–∞."}</div>
            <div class="header">–°—É—Ä–∞–ª—Ü–∞—Ö—É–π–Ω “Ø—Ä –¥“Ø–Ω:</div>
            <div class="outcome">{learning_outcome if learning_outcome else "–•–æ–æ—Å–æ–Ω –±–∞–π–Ω–∞."}</div>
        </div>
        """, unsafe_allow_html=True)

        # “Æ—Ä –¥“Ø–Ω–≥–∏–π–Ω —à–∞–ª–≥—É—É—Ä.csv-—ç—ç—Å —Ö–∞—Ä–≥–∞–ª–∑–∞—Ö “Ø—Ä –¥“Ø–Ω–≥–∏–π–Ω —à–∞–ª–≥—É—É—Ä—ã–≥ –∞–≤–∞—Ö
        result_df = None
        shown_shalguur_ids = set()
        if os.path.exists(criteria_path) and objectives_list:
            criteria_df = pd.read_csv(criteria_path)
            result_rows = []
            for obj in objectives_list:
                matched = criteria_df[criteria_df["–°—É—Ä–∞–ª—Ü–∞—Ö—É–π–Ω –∑–æ—Ä–∏–ª—Ç"].astype(str).str.strip() == obj.strip()]
                for _, row in matched.iterrows():
                    outcome_criteria = row.get("–°—É—Ä–∞–ª—Ü–∞—Ö—É–π–Ω “Ø—Ä  –¥“Ø–Ω–≥–∏–π–Ω —à–∞–ª–≥—É—É—Ä", "–•–æ–æ—Å–æ–Ω –±–∞–π–Ω–∞.")
                    for sentence in split_sentences(outcome_criteria):
                        result_rows.append({
                            "–°—É—Ä–∞–ª—Ü–∞—Ö—É–π–Ω “Ø—Ä –¥“Ø–Ω": "",  # –°—É—Ä–∞–ª—Ü–∞—Ö—É–π–Ω “Ø—Ä –¥“Ø–Ω–≥ –®–∞–ª–≥—É—É—Ä.csv-—ç—ç—Å outcomes_list-–∞–∞—Å –∞–≤–Ω–∞
                            "–°—É—Ä–∞–ª—Ü–∞—Ö—É–π–Ω “Ø—Ä –¥“Ø–Ω–≥–∏–π–Ω —à–∞–ª–≥—É—É—Ä": sentence,
                            "OUTCOMES CRITERIA ID": row.get("OUTCOMES CRITERIA ID", "")
                        })
            # outcomes_list-–∏–π–≥ “Ø—Ä –¥“Ø–Ω –±–∞–≥–∞–Ω–∞–¥ —Ö–∞—Ä–≥–∞–ª–∑—É—É–ª–∂ —Ö–∞—Ä—É—É–ª–Ω–∞
            if result_rows and outcomes_list:
                max_len = max(len(outcomes_list), len(result_rows))
                outcomes_list += [""] * (max_len - len(outcomes_list))
                result_rows += [{"–°—É—Ä–∞–ª—Ü–∞—Ö—É–π–Ω “Ø—Ä –¥“Ø–Ω": "", "–°—É—Ä–∞–ª—Ü–∞—Ö—É–π–Ω “Ø—Ä –¥“Ø–Ω–≥–∏–π–Ω —à–∞–ª–≥—É—É—Ä": "", "OUTCOMES CRITERIA ID": ""}] * (max_len - len(result_rows))
                for i in range(max_len):
                    result_rows[i]["–°—É—Ä–∞–ª—Ü–∞—Ö—É–π–Ω “Ø—Ä –¥“Ø–Ω"] = outcomes_list[i]
                result_df = pd.DataFrame(result_rows)
                st.subheader("üéØ –°—É—Ä–∞–ª—Ü–∞—Ö—É–π–Ω “Ø—Ä –¥“Ø–Ω, –°—É—Ä–∞–ª—Ü–∞—Ö—É–π–Ω “Ø—Ä –¥“Ø–Ω–≥–∏–π–Ω —à–∞–ª–≥—É—É—Ä")
                st.dataframe(result_df[["–°—É—Ä–∞–ª—Ü–∞—Ö—É–π–Ω “Ø—Ä –¥“Ø–Ω", "–°—É—Ä–∞–ª—Ü–∞—Ö—É–π–Ω “Ø—Ä –¥“Ø–Ω–≥–∏–π–Ω —à–∞–ª–≥—É—É—Ä"]], use_container_width=True, hide_index=True)
            else:
                st.info("–°—É—Ä–∞–ª—Ü–∞—Ö—É–π–Ω “Ø—Ä –¥“Ø–Ω —ç—Å–≤—ç–ª —à–∞–ª–≥—É—É—Ä –æ–ª–¥—Å–æ–Ω–≥“Ø–π.")
        else:
            st.info("“Æ—Ä –¥“Ø–Ω–≥–∏–π–Ω —à–∞–ª–≥—É—É—Ä.csv —Ñ–∞–π–ª —ç—Å–≤—ç–ª —Å—É—Ä–∞–ª—Ü–∞—Ö—É–π–Ω –∑–æ—Ä–∏–ª—Ç –æ–ª–¥—Å–æ–Ω–≥“Ø–π.")

        # –ì“Ø–π—Ü—ç—Ç–≥—ç–ª–∏–π–Ω —Ç“Ø–≤—à–∏–Ω.csv-—ç—ç—Å —Ö–∞—Ä–≥–∞–ª–∑–∞—Ö —à–∞–ª–≥—É—É—Ä—ã–Ω —Ç“Ø–≤—à–∏–Ω–≥“Ø“Ø–¥–∏–π–≥ –∞–≤–∞—Ö (–¥–∞–≤—Ö–∞—Ä–¥–∞–ª–≥“Ø–π–≥—ç—ç—Ä)
        level_data = []
        if os.path.exists(level_path) and result_df is not None and not result_df.empty:
            level_df = pd.read_csv(level_path)
            for shalguur_id in result_df["OUTCOMES CRITERIA ID"].unique():
                if shalguur_id in shown_shalguur_ids or not shalguur_id:
                    continue
                shown_shalguur_ids.add(shalguur_id)
                level_match = level_df[level_df["Shalguur ID"].astype(str).str.strip() == str(shalguur_id).strip()]
                if not level_match.empty:
                    st.markdown(f"**–ì“Ø–π—Ü—ç—Ç–≥—ç–ª–∏–π–Ω —Ç“Ø–≤—à–∏–Ω ({shalguur_id}):**")
                    level_row = level_match.iloc[0]
                    levels = [
                        level_row.get("–ì“Æ–π—Ü—ç—Ç–≥—ç–ª–∏–π–Ω I —Ç“Ø–≤—à–∏–Ω", "–•–æ–æ—Å–æ–Ω –±–∞–π–Ω–∞."),
                        level_row.get("–ì“Æ–π—Ü—ç—Ç–≥—ç–ª–∏–π–Ω II —Ç“Ø–≤—à–∏–Ω", "–•–æ–æ—Å–æ–Ω –±–∞–π–Ω–∞."),
                        level_row.get("–ì“Æ–π—Ü—ç—Ç–≥—ç–ª–∏–π–Ω III —Ç“Ø–≤—à–∏–Ω", "–•–æ–æ—Å–æ–Ω –±–∞–π–Ω–∞."),
                        level_row.get("–ì“Æ–π—Ü—ç—Ç–≥—ç–ª–∏–π–Ω IV —Ç“Ø–≤—à–∏–Ω", "–•–æ–æ—Å–æ–Ω –±–∞–π–Ω–∞.")
                    ]
                    level_table = pd.DataFrame({
                        "I —Ç“Ø–≤—à–∏–Ω": split_sentences(levels[0]),
                        "II —Ç“Ø–≤—à–∏–Ω": split_sentences(levels[1]),
                        "III —Ç“Ø–≤—à–∏–Ω": split_sentences(levels[2]),
                        "IV —Ç“Ø–≤—à–∏–Ω": split_sentences(levels[3])
                    })
                    st.dataframe(level_table, use_container_width=True, hide_index=True)
                    # –ü—Ä–æ–º—Ç–æ–¥ —Ö–∞—Ä—É—É–ª–∞—Ö –∑–æ—Ä–∏–ª–≥–æ–æ—Ä —Ç“Ø–≤—à–Ω–∏–π ”©–≥”©–≥–¥–ª–∏–π–≥ —Ü—É–≥–ª—É—É–ª–Ω–∞
                    level_data.append({
                        "id": shalguur_id,
                        "I": split_sentences(levels[0]),
                        "II": split_sentences(levels[1]),
                        "III": split_sentences(levels[2]),
                        "IV": split_sentences(levels[3])
                    })
                else:
                    st.info(f"{shalguur_id if shalguur_id else '–•–æ–æ—Å–æ–Ω –±–∞–π–Ω–∞.'} -–¥ —Ö–∞—Ä–≥–∞–ª–∑–∞—Ö –≥“Ø–π—Ü—ç—Ç–≥—ç–ª–∏–π–Ω —Ç“Ø–≤—à–∏–Ω –æ–ª–¥—Å–æ–Ω–≥“Ø–π.")
        elif os.path.exists(level_path):
            st.info("–ì“Ø–π—Ü—ç—Ç–≥—ç–ª–∏–π–Ω —Ç“Ø–≤—à–∏–Ω —Ö–∞—Ä—É—É–ª–∞—Ö —à–∞–ª–≥—É—É—Ä –æ–ª–¥—Å–æ–Ω–≥“Ø–π.")
        else:
            st.info("–ì“Ø–π—Ü—ç—Ç–≥—ç–ª–∏–π–Ω —Ç“Ø–≤—à–∏–Ω.csv —Ñ–∞–π–ª –æ–ª–¥—Å–æ–Ω–≥“Ø–π.")

        # --- Prompt “Ø“Ø—Å–≥—ç—Ö —Ö—ç—Å—ç–≥ ---
        st.markdown("#### üìã Prompt “Ø“Ø—Å–≥—ç—Ö")
        # –ì“Ø–π—Ü—ç—Ç–≥—ç–ª–∏–π–Ω —Ç“Ø–≤—à–Ω–∏–π —Ö“Ø—Å–Ω—ç–≥—Ç–∏–π–≥ –ø—Ä–æ–º—Ç–æ–¥ –æ—Ä—É—É–ª–∞—Ö
        level_text = ""
        if level_data:
            for l in level_data:
                level_text += f"\n–ì“Ø–π—Ü—ç—Ç–≥—ç–ª–∏–π–Ω —Ç“Ø–≤—à–∏–Ω ({l['id']}):\n"
                level_text += f"I —Ç“Ø–≤—à–∏–Ω: {'; '.join(l['I'])}\n"
                level_text += f"II —Ç“Ø–≤—à–∏–Ω: {'; '.join(l['II'])}\n"
                level_text += f"III —Ç“Ø–≤—à–∏–Ω: {'; '.join(l['III'])}\n"
                level_text += f"IV —Ç“Ø–≤—à–∏–Ω: {'; '.join(l['IV'])}\n"

        default_prompt = f"""
–¢–∞ –¥–∞—Ä–∞–∞—Ö –º—ç–¥—ç—ç–ª—ç–ª –¥—ç—ç—Ä —Ç—É–ª–≥—É—É—Ä–ª–∞–Ω —ç—ç–ª–∂–∏—Ç —Ö–∏—á—ç—ç–ª–∏–π–Ω –¥—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π —Ç”©–ª”©–≤–ª”©–ª—Ç –≥–∞—Ä–≥–∞:
- –•–∏—á—ç—ç–ª–∏–π–Ω –Ω—ç—Ä: {selected['–•–∏—á—ç—ç–ª–∏–π–Ω –Ω—ç—Ä']}
- –ù—ç–≥–∂ —Ö–∏—á—ç—ç–ª: {selected['–ù—ç–≥–∂ —Ö–∏—á—ç—ç–ª']}
- –≠—ç–ª–∂–∏—Ç —Ö–∏—á—ç—ç–ª: {selected['–≠—ç–ª–∂–∏—Ç —Ö–∏—á—ç—ç–ª']}
- –°—É—Ä–∞–ª—Ü–∞—Ö—É–π–Ω –∑–æ—Ä–∏–ª—Ç: {learning_objective}
- –≠—ç–ª–∂–∏—Ç —Ö–∏—á—ç—ç–ª–∏–π–Ω –∑–æ—Ä–∏–ª–≥–æ: {selected['–≠—ç–ª–∂–∏—Ç —Ö–∏—á—ç—ç–ª–∏–π–Ω –∑–æ—Ä–∏–ª–≥–æ']}
- –°—É—Ä–∞–ª—Ü–∞—Ö—É–π–Ω “Ø—Ä –¥“Ø–Ω: {learning_outcome}

–¢”©–ª”©–≤–ª”©–ª—Ç–∏–π–Ω –∑–∞–≥–≤–∞—Ä:
1. –•–∏—á—ç—ç–ª–∏–π–Ω “Ø–µ —à–∞—Ç (–•—É–≥–∞—Ü–∞–∞, –ë–∞–≥—à–∏–π–Ω “Ø–π–ª –∞–∂–∏–ª–ª–∞–≥–∞–∞, –°—É—Ä–∞–≥—á–∏–π–Ω “Ø–π–ª –∞–∂–∏–ª–ª–∞–≥–∞–∞ –≥—ç—Å—ç–Ω –±–∞–≥–∞–Ω–∞—Ç–∞–π —Ö“Ø—Å–Ω—ç–≥—Ç)
2. “Æ–Ω—ç–ª–≥—ç—ç–Ω–∏–π –Ω—ç–≥–∂, —à–∞–ª–≥—É—É—Ä
3. –î–∞—Å–≥–∞–ª, –±–æ–¥–ª–æ–≥–æ, –¥–∞–∞–ª–≥–∞–≤–∞—Ä (–•–∏—á—ç—ç–ª–∏–π–Ω “Ø–µ —à–∞—Ç –±“Ø—Ä–¥ –¥–∞–∞–ª–≥–∞–≤–∞—Ä –æ—Ä—É—É–ª–∞—Ö–¥–∞–∞ –°—É—Ä–∞–ª—Ü–∞—Ö—É–π–Ω “Ø—Ä –¥“Ø–Ω, —Å—É—Ä–∞–ª—Ü–∞—Ö—É–π–Ω “Ø—Ä –¥“Ø–Ω–≥–∏–π–Ω —à–∞–ª–≥—É—É—Ä—Ç –±–∞—Ä–∏–º–∂–∞–∞–ª–∞–Ω, –≥“Ø–π—Ü—ç—Ç–≥—ç–ª–∏–π–Ω 4 —Ç“Ø–≤—à–Ω–∏–π —à–∞–ª–≥—É—É—Ä—Ç —Ç—É–ª–≥—É—É—Ä–ª–∞–Ω 5 —Ö“Ø—Ä—Ç—ç–ª—Ö –¥–∞–∞–ª–≥–∞–≤–∞—Ä –±–æ–ª–æ–≤—Å—Ä—É—É–ª–Ω–∞ —É—É. 4 —Ç“Ø–≤—à–Ω–∏–π —à–∞–ª–≥—É—É—Ä –±–æ–ª–æ–Ω —Å—É—Ä–∞–ª—Ü–∞—Ö—É–π–Ω “Ø—Ä –¥“Ø–Ω–≥ —Å–æ–Ω–≥–æ–≥–¥—Å–æ–Ω —ç—ç–ª–∂–∏—Ç —Ö–∏—á—ç—ç–ª—Ç—ç–π —É—è–ª–¥—É—É–ª–∞–Ω –≥–∞—Ä–≥–∞–∂ ”©–≥–Ω”©.)
4. –î“Ø–≥–Ω—ç–ª—Ç, –≥—ç—Ä–∏–π–Ω –¥–∞–∞–ª–≥–∞–≤–∞—Ä
5. –•–∏—á—ç—ç–ª–∏–π–Ω “Ø–µ —à–∞—Ç –±“Ø—Ä–¥ 5 —Ö“Ø—Ä—Ç—ç–ª—Ö –¥–∞—Å–≥–∞–ª, –±–æ–¥–ª–æ–≥–æ, –¥–∞–∞–ª–≥–∞–≤–∞—Ä –æ—Ä—É—É–ª–Ω–∞ —É—É. –î–∞—Å–≥–∞–ª –±“Ø—Ä–∏–π–≥ –¥–∞—Ä–∞–∞—Ö –±–∞–π–¥–ª–∞–∞—Ä —Ç–æ–¥–æ—Ä—Ö–æ–π–ª–Ω–æ:

{level_text}
"""
        extra_text = st.text_area("–ü—Ä–æ–º—Ç–æ–¥ –Ω—ç–º—ç—Ö –∑“Ø–π–ª—ç—ç –±–∏—á–Ω—ç “Ø“Ø", key="extra_prompt")
        prompt_full = default_prompt.strip() + "\n" + extra_text.strip() if extra_text else default_prompt.strip()

        if st.button("–ü—Ä–æ–º—Ç “Ø“Ø—Å–≥—ç—Ö", key="make_prompt_btn"):
            st.session_state['show_prompt_copy'] = True

        if st.session_state.get('show_prompt_copy', False):
            st.markdown(f"""
            <div class="copy-box">
            <b>Prompt:</b><br>
            <pre>{prompt_full}</pre>
            </div>
            """, unsafe_allow_html=True)
            st.markdown("**Prompt-—ã–≥ COPY —Ö–∏–π–∂ –¥–∞—Ä–∞–∞—Ö —Ç–∞–ª–±–∞—Ä—Ç –æ—Ä—É—É–ª–Ω–∞ —É—É.**")
            if st.button("COPY", key="copy_btn"):
                st.session_state['show_prompt_copy'] = False
                st.session_state['show_plan_input'] = True

        if st.session_state.get('show_plan_input', False):
            st.markdown("#### üìù Prompt-–æ–æ—Ä “Ø“Ø—Å–≥—ç—Å—ç–Ω —Ç”©–ª”©–≤–ª”©–ª—Ç”©”© —ç–Ω–¥ paste —Ö–∏–π–Ω—ç “Ø“Ø:")
            user_plan = st.text_area("–¢”©–ª”©–≤–ª”©–ª—Ç”©”© —ç–Ω–¥ paste —Ö–∏–π–Ω—ç “Ø“Ø", height=200, key="plan_paste")
            if st.button("–¢”©–ª”©–≤–ª”©–≥”©”©–≥ —Ö–∞—Ä–∞—Ö", key="show_plan_btn") and user_plan:
                tables = re.findall(r"((?:\|.*\|\n)+)", user_plan)
                if tables:
                    for table in tables:
                        lines = [line.strip() for line in table.strip().split("\n") if line.strip()]
                        headers = []
                        data_rows = []
                        for i, line in enumerate(lines):
                            cols = [c.strip() for c in line.split("|") if c.strip()]
                            if i == 0:
                                headers = cols
                            elif len(cols) == len(headers):
                                data_rows.append(cols)
                        if headers and data_rows:
                            df_plan = pd.DataFrame(data_rows, columns=headers)
                            st.dataframe(df_plan, use_container_width=True, hide_index=True)
                        else:
                            st.markdown(f'<div class="copy-box">{table}</div>', unsafe_allow_html=True)
                else:
                    st.markdown(f'<div class="copy-box">{user_plan}</div>', unsafe_allow_html=True)
                st.session_state['show_plan_input'] = False

        # Default —Ö–∏—á—ç—ç–ª–∏–π–Ω “Ø–µ —à–∞—Ç
        lesson_stages = [
            {
                "–•—É–≥–∞—Ü–∞–∞": "5 –º–∏–Ω",
                "–ë–∞–≥—à–∏–π–Ω “Ø–π–ª –∞–∂–∏–ª–ª–∞–≥–∞–∞": "–°—ç–¥—ç–≤ —Ç–∞–Ω–∏–ª—Ü—É—É–ª–∞—Ö, –∞–Ω—Ö–∞–∞—Ä–∞–ª —Ç”©–≤–ª”©—Ä“Ø“Ø–ª—ç—Ö",
                "–°—É—Ä–∞–≥—á–∏–π–Ω “Ø–π–ª –∞–∂–∏–ª–ª–∞–≥–∞–∞": "–ê–Ω—Ö–∞–∞—Ä–∞–ª—Ç–∞–π —Å–æ–Ω—Å–æ—Ö, –∞—Å—É—É–ª—Ç–∞–¥ —Ö–∞—Ä–∏—É–ª–∞—Ö"
            },
            {
                "–•—É–≥–∞—Ü–∞–∞": "15 –º–∏–Ω",
                "–ë–∞–≥—à–∏–π–Ω “Ø–π–ª –∞–∂–∏–ª–ª–∞–≥–∞–∞": "–®–∏–Ω—ç –º—ç–¥–ª—ç–≥ —Ç–∞–π–ª–±–∞—Ä–ª–∞—Ö, –∂–∏—à—ç—ç “Ø–∑“Ø“Ø–ª—ç—Ö",
                "–°—É—Ä–∞–≥—á–∏–π–Ω “Ø–π–ª –∞–∂–∏–ª–ª–∞–≥–∞–∞": "–ñ–∏—à—ç—ç–≥ –¥–∞–≥–∞–∂ —Ö–∏–π—Ö, –∞—Å—É—É–ª—Ç –∞—Å—É—É—Ö"
            },
            {
                "–•—É–≥–∞—Ü–∞–∞": "15 –º–∏–Ω",
                "–ë–∞–≥—à–∏–π–Ω “Ø–π–ª –∞–∂–∏–ª–ª–∞–≥–∞–∞": "–î–∞—Å–≥–∞–ª –∞–∂–∏–ª ”©–≥”©—Ö, —Ö—è–Ω–∞—Ö",
                "–°—É—Ä–∞–≥—á–∏–π–Ω “Ø–π–ª –∞–∂–∏–ª–ª–∞–≥–∞–∞": "–î–∞—Å–≥–∞–ª –±–æ–¥–æ—Ö, –±–∞–≥—Ç –∞–∂–∏–ª–ª–∞—Ö"
            },
            {
                "–•—É–≥–∞—Ü–∞–∞": "5 –º–∏–Ω",
                "–ë–∞–≥—à–∏–π–Ω “Ø–π–ª –∞–∂–∏–ª–ª–∞–≥–∞–∞": "–î“Ø–≥–Ω—ç–ª—Ç —Ö–∏–π—Ö, –≥—ç—Ä–∏–π–Ω –¥–∞–∞–ª–≥–∞–≤–∞—Ä ”©–≥”©—Ö",
                "–°—É—Ä–∞–≥—á–∏–π–Ω “Ø–π–ª –∞–∂–∏–ª–ª–∞–≥–∞–∞": "–î“Ø–≥–Ω—ç–ª—Ç —Ö—ç–ª—ç—Ö, –≥—ç—Ä–∏–π–Ω –¥–∞–∞–ª–≥–∞–≤–∞—Ä –∞–≤–∞—Ö"
            }
        ]
        stages_df = pd.DataFrame(lesson_stages)
        st.subheader("üìù –•–∏—á—ç—ç–ª–∏–π–Ω “Ø–µ —à–∞—Ç –±“Ø—Ä—ç—ç—Ä —Ç”©–ª”©–≤–ª”©–ª—Ç")
        st.dataframe(stages_df, use_container_width=True, hide_index=True)